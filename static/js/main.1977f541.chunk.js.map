{"version":3,"sources":["assets/cancBtn1.png","assets/cancBtn2.png","assets/cancBtn3.png","assets/stickersPack.png","components/Main/Stickers/OnBord/StickerText.tsx","redux/actions.ts","redux/actionTypes.ts","components/Main/Stickers/StickerOnMove.tsx","components/Main/Stickers/OnBord/StickerPin.tsx","components/Main/Stickers/OnBord/StickerImage.tsx","components/Main/Stickers/OnBord/StickersOnBoard.tsx","components/Main/Stickers/StickerPack.tsx","components/Main/Main.tsx","App.tsx","redux/stickersReducer.ts","redux/rootReducer.ts","redux/store.ts","index.tsx","assets/stickerOne.png"],"names":["module","exports","Textarea","id","text","useState","localtext","setLocalText","textStore","useRef","disptach","useDispatch","handlerTextSave","dispatch","a","stickersArray","JSON","parse","localStorage","getItem","map","stick","clear","setItem","stringify","type","payload","changeStickerText","className","name","onChange","event","target","value","onFocus","current","style","visibility","onBlur","defaultValue","ref","placeholder","StickerOnMove","moveSticker","stickerOne","stickRef","useEffect","document","addEventListener","transform","String","pageX","pageY","StickerText","src","alt","Pin","pinColor","onClick","window","confirm","res","filter","delSticker","Image","StickersOnBoard","stickers","useSelector","state","fetchStickers","index","key","direction","left","x","top","y","StickerPin","StickerImage","StickerPack","setMoveSticker","stickersPack","Main","pinsArray","cancBtn1","cancBtn2","cancBtn3","randomInteger","min","max","rand","Math","random","round","randomstring","generate","sticker","addSticker","App","initialState","rootReducer","combineReducers","action","concat","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1977f541.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cancBtn1.aeb6d9a4.png\";","module.exports = __webpack_public_path__ + \"static/media/cancBtn2.f7c9cd5d.png\";","module.exports = __webpack_public_path__ + \"static/media/cancBtn3.0c1d1f1c.png\";","module.exports = __webpack_public_path__ + \"static/media/stickersPack.aa8dcf35.png\";","import React, { useState, useRef } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { changeStickerText } from '../../../../redux/actions'\r\n\r\ninterface Props {\r\n    id?: string\r\n    text: string\r\n}\r\nconst Textarea: React.FC<Props> = ({id, text}) => {\r\n    const [localtext, setLocalText] = useState<string>('')\r\n    const textStore = useRef<HTMLDivElement>(null)\r\n    const disptach = useDispatch()\r\n    const handlerLocalOnFocus = () => {\r\n        textStore.current!.style.visibility = 'hidden'\r\n        setLocalText(text)\r\n    }\r\n    const handlerLocalOnBlur = () => {\r\n        handlerTextSave(localtext)\r\n        textStore.current!.style.visibility = 'visibility'\r\n    }\r\n    const handlerNoteChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n        setLocalText(event.target.value)\r\n    }\r\n    const handlerTextSave = (text: string) => {\r\n        disptach(changeStickerText(id!, text))\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"sticktextLocal\">\r\n            <textarea \r\n                name=\"sticktextLocal\" \r\n                onChange={handlerNoteChange}\r\n                onFocus={handlerLocalOnFocus}\r\n                onBlur={handlerLocalOnBlur}\r\n                defaultValue={localtext}\r\n            ></textarea>\r\n        </div>\r\n        <div className=\"sticktextStore\" ref={textStore}>\r\n            <textarea \r\n                name=\"sticktextStore\" \r\n                placeholder=\"HI &#10;I AM &#10;YOUR NOTE =)\"\r\n                defaultValue={text}\r\n                style={{}}\r\n            ></textarea>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Textarea\r\n","import { FETCH_STICKERS, ADD_STICKER, DELETE_STICKER, CHANGE_TEXT, StickersActionTypes, addPayloadType } from \"./actionTypes\"\r\nimport { Dispatch } from \"redux\"\r\n\r\n\r\nexport const fetchStickers = (): StickersActionTypes => {\r\n    const stickers = JSON.parse(localStorage.getItem('stickers')!)\r\n    const emptyArr: object[] = []\r\n    return {\r\n        type: FETCH_STICKERS,\r\n        payload: stickers === null ? emptyArr : stickers\r\n    }\r\n}\r\nexport const addSticker = (stick: addPayloadType): StickersActionTypes => {\r\n    const sticker = {\r\n        id: stick.id,\r\n        x: stick.x,\r\n        y: stick.y,\r\n        direction: stick.direction,\r\n        pinColor: stick.pinColor,\r\n        text: stick.text\r\n    }\r\n\r\n    const stickersArray = JSON.parse(localStorage.getItem('stickers')!)\r\n    const res = stickersArray !== null ? true : false\r\n    if(res) {\r\n        localStorage.setItem('stickers', JSON.stringify([...stickersArray, sticker])) \r\n    } else {\r\n        localStorage.setItem('stickers', JSON.stringify([sticker]))\r\n    }\r\n    return {\r\n        type: ADD_STICKER,\r\n        payload: sticker\r\n    }\r\n}\r\nexport const delSticker = (id: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        const stickersArray = JSON.parse(localStorage.getItem('stickers')!)\r\n        const res = stickersArray.filter((stick: {id: string})=>stick.id !== id)\r\n        localStorage.clear()\r\n        localStorage.setItem('stickers', JSON.stringify(res))\r\n        await dispatch({ type: DELETE_STICKER, payload: id })\r\n    }\r\n}\r\nexport const changeStickerText = (id: string, text: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let stickersArray = JSON.parse(localStorage.getItem('stickers')!)\r\n        stickersArray.map((stick: { id: string, text: string }) => stick.id === id ? stick.text = text : null)\r\n        localStorage.clear()\r\n        localStorage.setItem('stickers', JSON.stringify(stickersArray))\r\n        dispatch({ type: CHANGE_TEXT, payload: { id: id, text: text } })\r\n    }\r\n}","export const FETCH_STICKERS = 'STICKER/FETCH_STICKERS'\r\nexport const ADD_STICKER    = 'STICKER/ADD_STICKER'\r\nexport const DELETE_STICKER = 'STICKER/DELETE_STICKER'\r\nexport const CHANGE_TEXT    = 'STICKER/CHANGE_TEXT'\r\n\r\nexport type addPayloadType = {\r\n    id: string\r\n    x: number\r\n    y: number\r\n    direction: \"rightStick\" | \"leftStick\"\r\n    pinColor: string\r\n    text: string\r\n}\r\ninterface ChangeTextStickerAction {\r\n    type: typeof CHANGE_TEXT\r\n    payload: { id: string, text: string }\r\n}\r\ninterface FetchStickerAction {\r\n    type: typeof FETCH_STICKERS\r\n    payload: object[]\r\n}\r\ninterface AddStickerAction {\r\n    type: typeof ADD_STICKER\r\n    payload: addPayloadType\r\n}\r\ninterface DeleteStickerAction {\r\n    type: typeof DELETE_STICKER\r\n    payload: string\r\n}\r\n\r\nexport type StickersActionTypes = ChangeTextStickerAction | FetchStickerAction | AddStickerAction | DeleteStickerAction","import React, { useEffect, useRef } from 'react'\r\n\r\nimport StickerText from './OnBord/StickerText'\r\n\r\ninterface Props {\r\n    moveSticker: boolean\r\n    stickerOne: string\r\n}\r\nconst StickerOnMove: React.FC<Props> = ({moveSticker, stickerOne}) => {\r\n    const stickRef = useRef<HTMLDivElement>(null)\r\n    useEffect(() => {\r\n        if(moveSticker) {\r\n            document.addEventListener('mousemove', (event: MouseEvent) => {\r\n                if(stickRef.current) {\r\n                    stickRef.current.style.transform = `translate(${String(event.pageX-85)}px, ${String(event.pageY-480)}px)`\r\n                }\r\n                \r\n            })\r\n        }\r\n    }, [moveSticker])\r\n    if(!moveSticker) {\r\n        return null\r\n    }\r\n    return (\r\n        <div \r\n            className={\"stickerOneMove\"}\r\n            ref={stickRef}\r\n        >\r\n            <StickerText text={''}/>\r\n            <img src={stickerOne} alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StickerOnMove\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { delSticker } from '../../../../redux/actions'\r\n\r\ninterface Props {\r\n    id: string\r\n    pinColor: string\r\n}\r\nconst Pin: React.FC<Props> = ({id, pinColor}) => {\r\n    const dispatch = useDispatch()\r\n    const handlerPinClick = () => {\r\n        const isDelete = window.confirm(\"Delete note?\")\r\n        if(isDelete) {\r\n            dispatch(delSticker(id))\r\n        }\r\n    }\r\n    return (\r\n        <div \r\n            className=\"stickPin\"\r\n            onClick={handlerPinClick}\r\n        >\r\n            <img src={pinColor} alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pin\r\n","import React from 'react'\r\n\r\ninterface Props {\r\n    stickerOne: string\r\n}\r\nconst Image: React.FC<Props> = ({stickerOne}) => {\r\n    return (\r\n        <div className=\"stickImg\">\r\n            <img src={stickerOne} alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Image\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport StickerPin from './StickerPin'\r\nimport StickerText from './StickerText'\r\nimport StickerImage from './StickerImage'\r\nimport { fetchStickers } from '../../../../redux/actions'\r\n\r\ntype StickerObjType = {\r\n    id: string\r\n    x: number\r\n    y: number\r\n    direction: \"rightStick\" | \"leftStick\"\r\n    pinColor: string\r\n    text: string\r\n}\r\n\r\ntype StickersState = {\r\n    stickers: {\r\n        stickers: StickerObjType[]\r\n    }\r\n}\r\n\r\ninterface Props {\r\n    stickerOne: string\r\n}\r\nconst StickersOnBoard: React.FC<Props> = ({stickerOne}) => {\r\n    const stickers = useSelector<StickersState, StickerObjType[]>(state => state.stickers.stickers)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchStickers())\r\n    }, [dispatch])\r\n    return (\r\n        <>\r\n        {stickers && stickers.map((stick, index) => {\r\n            return (\r\n            <div \r\n                key={stick.id}\r\n                className={\"stickerOne \" + stick.direction}\r\n                style={{\r\n                    left: stick.x-75,\r\n                    top: stick.y-75\r\n                }}\r\n            >\r\n                <StickerPin id={stick.id}  pinColor={stick.pinColor} />\r\n                \r\n                <StickerText text={stick.text} id={stick.id}/>\r\n                <StickerImage stickerOne={stickerOne} />\r\n            </div>\r\n            )\r\n        })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default StickersOnBoard\r\n","import React from 'react'\r\n\r\nimport stickersPack from '../../../assets/stickersPack.png'\r\n\r\ninterface Props {\r\n    setMoveSticker: (flag: boolean) => void\r\n}\r\nconst StickerPack: React.FC<Props> = ({setMoveSticker}) => {\r\n    const handlerStickersClick = () => {\r\n        setMoveSticker(true)\r\n    }\r\n    return (\r\n        <div \r\n            className=\"stickersBlock\"\r\n            onClick={handlerStickersClick}\r\n        >\r\n            <img src={stickersPack} alt=\"\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StickerPack\r\n","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport randomstring from 'randomstring'\r\n\r\nimport './main.scss'\r\nimport stickerOne from '../../assets/stickerOne.png'\r\nimport cancBtn1 from '../../assets/cancBtn1.png'\r\nimport cancBtn2 from '../../assets/cancBtn2.png'\r\nimport cancBtn3 from '../../assets/cancBtn3.png'\r\n\r\nimport StickerOnMove from './Stickers/StickerOnMove'\r\nimport StickersOnBoard from './Stickers/OnBord/StickersOnBoard'\r\nimport { addSticker } from '../../redux/actions'\r\nimport StickerPack from './Stickers/StickerPack'\r\n\r\n\r\nconst Main: React.FC = () => {\r\n    const [moveSticker, setMoveSticker] = useState<boolean>(false)\r\n    const pinsArray = [cancBtn1, cancBtn2, cancBtn3]\r\n    const dispatch = useDispatch()\r\n    const handlerBordClick = (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        if(moveSticker) {\r\n            const id: string = randomstring.generate(5)\r\n            dispatch(addSticker({   id: id,\r\n                                    x: event.pageX, \r\n                                    y: event.pageY, \r\n                                    direction: Math.round(Math.random()) ? \"rightStick\" : \"leftStick\",\r\n                                    pinColor: pinsArray[randomInteger(0,2)],\r\n                                    text: ''\r\n                                }))\r\n            setMoveSticker(false)\r\n        }\r\n    }\r\n    const randomInteger = (min: number, max: number) => {\r\n        let rand = min - 0.5 + Math.random() * (max - min + 1)\r\n        return Math.round(rand)\r\n    }\r\n    return (\r\n        <div \r\n            className=\"container-fluid mainWrapper\"\r\n            onClick={handlerBordClick}\r\n        >\r\n            <StickerPack \r\n                setMoveSticker={setMoveSticker}\r\n            />\r\n            <StickerOnMove \r\n                moveSticker={moveSticker}\r\n                stickerOne={stickerOne}\r\n            />\r\n            <StickersOnBoard\r\n                stickerOne={stickerOne}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react'\n\nimport Main from './components/Main/Main'\n\nfunction App() {\n  return (\n    <>\n    <Main />\n    </>\n  )\n}\n\nexport default App;\n","import { FETCH_STICKERS, ADD_STICKER, DELETE_STICKER, CHANGE_TEXT, StickersActionTypes, addPayloadType } from './actionTypes'\r\n\r\nexport interface StickersState {\r\n    readonly stickers: addPayloadType[]\r\n}\r\nconst initialState: StickersState = {\r\n    stickers: []\r\n}\r\n\r\nexport const stickersReducer = (state = initialState, action: StickersActionTypes) => {\r\n    switch(action.type) {\r\n        case FETCH_STICKERS:\r\n            return { ...state, stickers: action.payload}\r\n        case ADD_STICKER:\r\n            return { ...state, stickers: state.stickers.concat({    \r\n                                                                    id: action.payload.id,\r\n                                                                    x: action.payload.x, \r\n                                                                    y: action.payload.y, \r\n                                                                    direction: action.payload.direction,\r\n                                                                    pinColor: action.payload.pinColor,\r\n                                                                    text: action.payload.text\r\n                                                                })}\r\n        case DELETE_STICKER:\r\n            return { ...state, stickers: state.stickers.filter((stick)=>stick.id !== action.payload) }\r\n        case CHANGE_TEXT:\r\n            state.stickers.map((stick: { id: string, text: string }) => stick.id === action.payload.id ? stick.text = action.payload.text : null)\r\n            return state\r\n        default: return state\r\n    }\r\n}","import { combineReducers } from 'redux'\r\nimport { stickersReducer } from './stickersReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n    stickers: stickersReducer\r\n})","import { createStore, compose, applyMiddleware } from 'redux'\r\nimport { rootReducer } from './rootReducer'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst store = createStore(rootReducer, compose(\r\n    applyMiddleware(thunk)\r\n))\r\n\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)","module.exports = __webpack_public_path__ + \"static/media/stickerOne.44a9a30d.png\";"],"sourceRoot":""}